[1mdiff --git a/lib/kernel/.list.c.swp b/lib/kernel/.list.c.swp[m
[1mdeleted file mode 100644[m
[1mindex e428979..0000000[m
Binary files a/lib/kernel/.list.c.swp and /dev/null differ
[1mdiff --git a/threads/synch.c b/threads/synch.c[m
[1mindex 317c68a..f6055fe 100755[m
[1m--- a/threads/synch.c[m
[1m+++ b/threads/synch.c[m
[36m@@ -68,7 +68,8 @@[m [msema_down (struct semaphore *sema)[m
   old_level = intr_disable ();[m
   while (sema->value == 0) [m
     {[m
[31m-      list_push_back (&sema->waiters, &thread_current ()->elem);[m
[32m+[m[32m      //list_push_back (&sema->waiters, &thread_current ()->elem);[m
[32m+[m			[32mlist_insert_ordered(&sema->waiters, &thread_current()->elem, less_priority, NULL);[m
       thread_block ();[m
     }[m
   sema->value--;[m
[36m@@ -109,14 +110,22 @@[m [mvoid[m
 sema_up (struct semaphore *sema) [m
 {[m
   enum intr_level old_level;[m
[32m+[m	[32mstruct list_elem* e;[m
[32m+[m	[32mstruct thread* t;[m
 [m
   ASSERT (sema != NULL);[m
 [m
   old_level = intr_disable ();[m
[31m-  if (!list_empty (&sema->waiters)) [m
[31m-    thread_unblock (list_entry (list_pop_front (&sema->waiters),[m
[32m+[m[32m  if (!list_empty (&sema->waiters)){[m[41m [m
[32m+[m		[32me = list_pop_back (&sema->waiters);[m
[32m+[m		[32mt = list_entry(e, struct thread, elem);[m
[32m+[m		[32mthread_unblock(t);[m
[32m+[m	[32m/*	thread_unblock (list_entry (list_pop_back (&sema->waiters),[m
                                 struct thread, elem));[m
[32m+[m																[32m*/[m
[32m+[m	[32m}[m
   sema->value++;[m
[32m+[m	[32mthread_yield();[m
   intr_set_level (old_level);[m
 }[m
 [m
[36m@@ -296,6 +305,7 @@[m [mcond_wait (struct condition *cond, struct lock *lock)[m
   [m
   sema_init (&waiter.semaphore, 0);[m
   list_push_back (&cond->waiters, &waiter.elem);[m
[32m+[m	[32m//list_insert_ordered(&cond->waiters, &waiter.elem, less_priority2, NULL);[m
   lock_release (lock);[m
   sema_down (&waiter.semaphore);[m
   lock_acquire (lock);[m
[36m@@ -336,3 +346,14 @@[m [mcond_broadcast (struct condition *cond, struct lock *lock)[m
   while (!list_empty (&cond->waiters))[m
     cond_signal (cond, lock);[m
 }[m
[32m+[m
[32m+[m
[32m+[m[32m/* helper function for cond */[m
[32m+[m[32m/*[m
[32m+[m[32mbool less_priority(const struct list_elem *a,[m
[32m+[m									[32mconst struct list_elem *b,[m
[32m+[m									[32mvoid* aux UNUSED){[m
[32m+[m	[32mstruct t_a = list_entry(list_entry(a, struct semaphore_elem, elem),[m
[32m+[m													[32mstruct );[m
[32m+[m[32m}[m
[32m+[m[32m*/[m
[1mdiff --git a/threads/thread.c b/threads/thread.c[m
[1mindex 6e8f470..5c490ab 100755[m
[1m--- a/threads/thread.c[m
[1m+++ b/threads/thread.c[m
[36m@@ -615,6 +615,8 @@[m [mallocate_tid (void)[m
    Used by switch.S, which can't figure it out on its own. */[m
 uint32_t thread_stack_ofs = offsetof (struct thread, stack);[m
 [m
[32m+[m
[32m+[m[32m/* hel[er function */[m
 bool less_priority(const struct list_elem *a,[m
 									const struct list_elem *b, void* aux UNUSED){[m
 	struct thread* t_a = list_entry(a, struct thread, elem);[m
[36m@@ -622,3 +624,17 @@[m [mbool less_priority(const struct list_elem *a,[m
 [m
 	return t_a->priority <= t_b->priority;[m
 }[m
[32m+[m
[32m+[m[32m/* Show all threads in given list  */[m
[32m+[m[32mvoid show_ready_list(void){[m
[32m+[m	[32mstruct list_elem* e;[m
[32m+[m	[32mstruct thread* t;[m
[32m+[m
[32m+[m	[32mprintf("head --> ");[m
[32m+[m	[32mfor(e = list_begin(&ready_list) ; e != list_end(&ready_list) ; e = list_next(e)){[m
[32m+[m		[32mt = list_entry(e, struct thread, elem);[m
[32m+[m		[32mprintf("%s --> ", t->name);[m
[32m+[m	[32m}[m
[32m+[m	[32mprintf("tail\n");[m
[32m+[m
[32m+[m[32m}[m
[1mdiff --git a/threads/thread.h b/threads/thread.h[m
[1mindex b80a3ae..a751128 100755[m
[1m--- a/threads/thread.h[m
[1m+++ b/threads/thread.h[m
[36m@@ -140,5 +140,6 @@[m [mint thread_get_recent_cpu (void);[m
 int thread_get_load_avg (void);[m
 [m
 list_less_func less_priority;[m
[32m+[m[32mvoid show_ready_list(void);[m
 [m
 #endif /* threads/thread.h */[m
[1mdiff --git a/utils/setitimer-helper.o b/utils/setitimer-helper.o[m
[1mold mode 100755[m
[1mnew mode 100644[m
[1mindex 7f6e98a..1b0c6a8[m
Binary files a/utils/setitimer-helper.o and b/utils/setitimer-helper.o differ
[1mdiff --git a/utils/squish-pty.o b/utils/squish-pty.o[m
[1mold mode 100755[m
[1mnew mode 100644[m
[1mdiff --git a/utils/squish-unix.o b/utils/squish-unix.o[m
[1mold mode 100755[m
[1mnew mode 100644[m
